#!/usr/bin/env python3
import glob
import matplotlib.pyplot as plt
import numpy as np
import math
import csv

	
def getDatas(str):
	linesSeq = open(str, 'r')	
	charsSeq = [line.rstrip('\n') for line in linesSeq]
	
	inputParams=[]
	tokens=[]
	evTimes=[]
	chronoTimes=[]

	for line in charsSeq:
		#print line
		#if line[:1]=='*':
		if line[:1]=='$': #TOTAL ELAPSED
			tokens= line.split(',',2)
			#print tokens
			#if str[-9:]=="oneSm.txt":
			#	evTimes.append(float(tokens[3]))
			#else:
			#	evTimes.append(float(tokens[4])) #Time measured by events
			if str[-15:]=="host_cosMat.txt" or str[-22:]=="host_cosMat_invert.txt":
				chronoTimes.append(float(tokens[0]))
			else:
			evTimes.append(float(tokens[0]))
			chronoTimes.append(float(tokens[1]))

		elif line[:1]=='#': #INPUT PARAMS
			tokens= line.split(',',8)
			inputParams.append(int(tokens[1:]))
			print("\nInput params: ")
			print inputParams
			#if str[-9:]=="oneSm.txt":
			#	evTimes.append(float(tokens[3]))
			#else:
			#	evTimes.append(float(tokens[4])) #Time measured by events
	
	print(inputParams)
	print(evTimes)
	print(chronoTimes)

	return inputParams, evTimes, chronoTimes

	
def getAvgTimes(times1, times2):
	
	l1=[sum(times1[0:3])/4, sum(times1[4:11])/8, sum(times1[12:27])/16 ]
	l2=[sum(times2[0:3])/4, sum(times2[4:11])/8, sum(times2[12:27])/16 ]
	
	return l1,l2
	
	
def divideDatas(evTimes,chronoTimes):
	i=0
	j=0
	c=0
	ev=[][]
	ch=[][]
	while i<12:
		maxEv=evTimes[c]
		minEV=evTimes[c]
		while i<5:
			while j<5:
				ev[i,j]+=evTimes[c]
				ch[i,j]+=chronoTimes[c]
				c+=1
	ev[:][:]/=12
	ch[:][:]/=12
	
def divideDatasInverted(evTimes,chronoTimes):
	i=0
	j=0
	c=0
	ev=[][]
	ch=[][]
	eAvg=[]
	cAvg=[]
	for e,c in zip(evTimes,chronoTimes):
		if i<12:
			ev.append(e)
			ch.append(c)			
			i+=1
		tmp1,tmp2=getAvgTimes2(ev,ch)
		eAvg.append(tmp1)
		cAvg.append(tmp2)
		ev=[]
		ch=[]
		i=0
					
	
def getAvgTimes2(evTimes,chronoTimes):


	evTimes.remove(max(evTimes))
	evTimes.remove(min(evTimes))

	chronoTimes.remove(max(chronoTimes))
	chronoTimes.remove(min(chronoTimes))

	eventAvg = sum(evTimes)/len(evTimes)
	chronoAvg = sum(chronoTimes)/len(chronoTimes)
		
	
		
	return eventAvg,chronoAvg
	
##########
###MAIN###
##########
def main():
	path = '../results/'

	files = [f for f in glob.glob(path + "**/*.txt", recursive=True)]

	for f in files:
		print("\n***** Datas of ***** ")
		print(f)
		datas = getDatas(f)
	
	#print("\nStream Times: ")
	#stream1 = getDatas('../results/stream.txt')


	#print("\nFuture Times: ")
	#future1 = getDatas('../results/future.txt')

	
	#print("\nManaged Times: ")
	#managed1 = getDatas('../results/managed.txt')


	#print("\nOne SM Times: ")
	#oneSm = getDatas('../results/oneSm.txt')

	#elems=[1792,3584,7168,14336,28672,57344]
	#iterNum=[10,50,250,1250,2500]


	s1 = getAvgTimes2(stream1)
	f1 = getAvgTimes2(future1)
	m1 = getAvgTimes2(managed1)	
	one = getAvgTimes2(oneSm)	
	
	#one=l2=[sum(oneSm[0:3])/4, sum(oneSm[4:11])/8, sum(oneSm[12:27])/16 ]
	print("\nFuture avg: ")
	print(f1)	
	
	print("\nStream avg: ")
	print(s1)
	
	print("\nManaged avg: ")
	print(m1)

	print("\nOne SM avg: ")
	print(one)	
	
	o=np.array(one, dtype=np.float)
	s=np.array(s1, dtype=np.float)
	f=np.array(f1, dtype=np.float)
	m=np.array(m1, dtype=np.float)
	
	speedUp1 = o/f
	speedUp2 = o/s
	speedUp3 = o/m	
	print("\nFuture speedup: ")
	print(speedUp1)	
	print("\nStream speedup: ")
	print(speedUp2)
	print("\nManaged Memory Stream speedup: ")
	print(speedUp3)
	
	
	######################
	########GRAPHS########
	######################	
	
	
	
	#N=3584 COMPARISON
	plt.figure(1)
	

	
	plt.plot(iterNum, f1[5:10], marker='.',label='Future')
	
	plt.plot(iterNum, s1[5:10], marker='.',label='Stream ')

	plt.plot(iterNum, m1[5:10], marker='.',label='Managed')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED 3584 ELEMS \n (ms)')
	
	#plt.xscale('log',basex=2)
	plt.xticks(iterNum)
	plt.xscale('log',basex=5)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()
	
	#N=14336 COMPARISON
	plt.figure(2)
	
	plt.plot(iterNum, f1[15:20], marker='.',label='Future')
	
	plt.plot(iterNum, s1[15:20], marker='.',label='Stream ')

	plt.plot(iterNum, m1[15:20], marker='.',label='Managed')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED 14336 ELEMS \n (ms)')
	#plt.xticks(elems)
	#plt.xscale('log',basex=2)
	plt.xticks(iterNum)
	plt.xscale('log',basex=5)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()

	#N=57344 COMPARISON
	plt.figure(3)
	
	plt.plot(iterNum, f1[25:30], marker='.',label='Future')
	
	plt.plot(iterNum, s1[25:30], marker='.',label='Stream ')

	plt.plot(iterNum, m1[25:30], marker='.',label='Managed')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED 57344 ELEMS \n (ms)')
	#plt.xticks(elems)
	#plt.xscale('log',basex=2)
	plt.xticks(iterNum)
	plt.xscale('log',basex=5)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()
	
	
	
	
	#M=250 COMPARISON
	plt.figure(4)
	
	plt.plot(elems, [f1[2],f1[7],f1[12],f1[17],f1[22],f1[27]], marker='.',label='Future')
	
	plt.plot(elems, [s1[2],s1[7],s1[12],s1[17],s1[22],s1[27]], marker='.',label='Stream ')

	plt.plot(elems, [m1[2],m1[7],m1[12],m1[17],m1[22],m1[27]], marker='.',label='Managed')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED 250 KER ITER \n (ms)')
	
	plt.xscale('log',basex=2)
	#plt.xticks(elems)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()
	
	#M=1250 COMPARISON
	plt.figure(5)
	
	plt.plot(elems, [f1[3],f1[8],f1[13],f1[18],f1[23],f1[28]], marker='.',label='Future')
	
	plt.plot(elems, [s1[3],s1[8],s1[13],s1[18],s1[23],s1[28]], marker='.',label='Stream ')

	plt.plot(elems, [m1[3],m1[8],m1[13],m1[18],m1[23],m1[28]], marker='.',label='Managed')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED 1250 KER ITER \n (ms)')
	#plt.xticks(elems)
	plt.xscale('log',basex=2)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()

	#M=2500 COMPARISON
	plt.figure(6)
	
	plt.plot(elems, [f1[4],f1[9],f1[14],f1[19],f1[24],f1[29]], marker='.',label='Future')
	
	plt.plot(elems, [s1[4],s1[9],s1[14],s1[19],s1[24],s1[29]], marker='.',label='Stream ')

	plt.plot(elems, [m1[4],m1[9],m1[14],m1[19],m1[24],m1[29]], marker='.',label='Managed')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED 2500 KER ITER \n (ms)')
	#plt.xticks(elems)
	plt.xscale('log',basex=2)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()
	
	#COMPARE ALL ITERS
	
	plt.figure(7)
	
	plt.plot(elems, [f1[2],f1[7],f1[12],f1[17],f1[22],f1[27]], marker='o',label='Future 250', color='blue', linestyle=':')	
	plt.plot(elems, [s1[2],s1[7],s1[12],s1[17],s1[22],s1[27]], marker='o',label='Stream 250',color='green', linestyle=':')
	plt.plot(elems, [m1[2],m1[7],m1[12],m1[17],m1[22],m1[27]], marker='o',label='Managed 250',color='red', linestyle=':')
	
	plt.plot(elems, [f1[3],f1[8],f1[13],f1[18],f1[23],f1[28]], marker='v',label='Future 1250',color='blue', linestyle='--')	
	plt.plot(elems, [s1[3],s1[8],s1[13],s1[18],s1[23],s1[28]], marker='v',label='Stream 1250',color='green', linestyle='--')
	plt.plot(elems, [m1[3],m1[8],m1[13],m1[18],m1[23],m1[28]], marker='v',label='Managed 1250',color='red', linestyle='--')
	
	plt.plot(elems, [f1[4],f1[9],f1[14],f1[19],f1[24],f1[29]], marker='s',label='Future 2500',color='blue')	
	plt.plot(elems, [s1[4],s1[9],s1[14],s1[19],s1[24],s1[29]], marker='s',label='Stream 2500',color='green')
	plt.plot(elems, [m1[4],m1[9],m1[14],m1[19],m1[24],m1[29]], marker='s',label='Managed 2500',color='red')
	
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('EVENT ELAPSED (ms)')
	
	plt.xscale('log',basex=2)
	#plt.xticks(elems)
	plt.legend(loc='upper left')
	plt.grid()
	plt.show()
	
	


	
	#SPEEDUP
	plt.figure(8)
	plt.plot(elems,  [speedUp1[2],speedUp1[7],speedUp1[12],speedUp1[17],speedUp1[22],speedUp1[27]], marker='o',label='Future 250',color='blue')
	plt.plot(elems,  [speedUp2[2],speedUp2[7],speedUp2[12],speedUp2[17],speedUp2[22],speedUp2[27]], marker='o',label='Stream 250',color='green')
	plt.plot(elems,  [speedUp3[2],speedUp3[7],speedUp3[12],speedUp3[17],speedUp3[22],speedUp3[27]], marker='o',label='Managed 250',color='red')
	plt.plot(elems, elems, marker='.',label='Ideal speed up',color='orange',linestyle='--')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('SPEEDUP')
	#plt.xticks(elems)

	
	plt.xlim([elems[0],elems[5]])
	plt.ylim([elems[0],elems[5]])
	
	plt.xscale('log',basex=2)
	plt.yscale('log',basey=2)
	
	plt.legend(loc='upper left')
	
	plt.grid()
	plt.show()
	
	
	plt.figure(9)
	plt.plot(elems, [speedUp1[3],speedUp1[8],speedUp1[13],speedUp1[18],speedUp1[23],speedUp1[28]], marker='v',label='Future 1250',color='blue')
	plt.plot(elems, [speedUp2[3],speedUp2[8],speedUp2[13],speedUp2[18],speedUp2[23],speedUp2[28]], marker='v',label='Stream 1250',color='green')
	plt.plot(elems, [speedUp3[3],speedUp3[8],speedUp3[13],speedUp3[18],speedUp3[23],speedUp3[28]], marker='v',label='Managed 1250',color='red')
	
	plt.plot(elems, elems, marker='.',label='Ideal speed up',color='orange',linestyle='--')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('SPEEDUP')
	#plt.xticks(elems)

	
	plt.xlim([elems[0],elems[5]])
	plt.ylim([elems[0],elems[5]])
	
	plt.xscale('log',basex=2)
	plt.yscale('log',basey=2)
	
	plt.legend(loc='upper left')
	
	plt.grid()
	plt.show()
	
	plt.figure(10)		
	plt.plot(elems, [speedUp1[4],speedUp1[9],speedUp1[14],speedUp1[19],speedUp1[24],speedUp1[29]], marker='s',label='Future 2500',color='blue')
	plt.plot(elems, [speedUp2[4],speedUp2[9],speedUp2[14],speedUp2[19],speedUp2[24],speedUp2[29]], marker='s',label='Stream 2500',color='green')
	plt.plot(elems, [speedUp3[4],speedUp3[9],speedUp3[14],speedUp3[19],speedUp3[24],speedUp3[29]], marker='s',label='Managed speed up 2500',color='red')
	

	
	plt.plot(elems, elems, marker='.',label='Ideal speed up',color='orange',linestyle='--')
	plt.xlabel('ELEM NUMBER')
	plt.ylabel('SPEEDUP')
	#plt.xticks(elems)

	
	plt.xlim([elems[0],elems[5]])
	plt.ylim([elems[0],elems[5]])
	
	plt.xscale('log',basex=2)
	plt.yscale('log',basey=2)
	
	plt.legend(loc='upper left')
	
	plt.grid()
	plt.show()
	


if __name__ == "__main__":
	main()









